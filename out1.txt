class A:
    def print_smth(self):
        print('a')
    def a_method(self):
        print('a method')

class B:
    def print_smth(self):
        print('B')
    def b_method(self):
        print('b method')

class C(A):
    def print_smth(self):
        print('C')
    def c_method(self):
        print('c method')

class D(B, C):
    def d_method(self):
        print('d method')


d = D()
d.a_method()
d.b_method()
d.c_method()
d.d_method()
d.print_smth()
print(D.__mro__)

a = int(input('a: '))
b = int(input('b: '))
try:
    result = a/b
except ZeroDivisionError as err:
    print(f' b is zero = {err}!!!')
except Exception as err:
    print(f'SOMETHING WRONG - {err}!!!')
else:
    print("Ошибки не было")
finally:
    print('Сработает всегда')

a = int(input('a: = '))
b = int(input('b: = '))
if b == 0:
    raise ZeroDivisionError('b is zero')

class MyExceptoin(Exception):
    def __init__(self, message = 'AAA!!'):
        super().__init__(message)

raise MyExceptoin

from abc import ABC, abstractmethod

class A(ABC):
    @abstractmethod
    def do_smth(self):
        print('I am a parent')
class B(A):
    def do_smth(self):
        print('i am a child')
a = A()
b = B()

class MyInterface(ABC):
    @abstractmethod
    def do_a(self, arg1):
        raise NotImplemented
    @abstractmethod
    def do_b(self, arg1, arg2):
        raise NotImplemented

class MyClass(MyInterface):
    def do_a(self, arg1):
        print(arg1)
    def do_b(self, arg1, arg2):
        print(arg1, arg2)

class MyMixin():
    def do_a(self):
        print(self.a)

    def do_b(self, arg1, arg2):
        print(self.b)


class MyClass(MyMixin):
    def __init__(self, a, b):
        self.a = a
        self.b = b